<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from generateqrletters/xml/schema/CRM/GenerateQRLetters/GenerateQRLetters.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:3a48c6092e643c4961f97b8259170ae0)
 */
use CRM_GenerateQRLetters_ExtensionUtil as E;

/**
 * Database access object for the GenerateQRLettersCache entity.
 */
class CRM_GenerateQRLetters_DAO_GenerateQRLettersCache extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '1.0';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_qr_letters_cache';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique Generate QR Letters Cache ID
   *
   * @var int
   */
  public $id;

  /**
   * html_message
   *
   * @var longtext
   */
  public $html_message;

  /**
   * Submitted form values for this template
   *
   * @var longtext
   */
  public $form_values;

  /**
   * @var datetime
   */
  public $datetime;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_qr_letters_cache';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Generate QRLetters Caches') : E::ts('Generate QRLetters Cache');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique Generate QR Letters Cache ID'),
          'required' => TRUE,
          'where' => 'civicrm_qr_letters_cache.id',
          'table_name' => 'civicrm_qr_letters_cache',
          'entity' => 'GenerateQRLettersCache',
          'bao' => 'CRM_GenerateQRLetters_DAO_GenerateQRLettersCache',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => '1.0',
        ],
        'html_message' => [
          'name' => 'html_message',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('html message'),
          'description' => E::ts('html_message'),
          'import' => TRUE,
          'where' => 'civicrm_qr_letters_cache.html_message',
          'export' => TRUE,
          'table_name' => 'civicrm_qr_letters_cache',
          'entity' => 'GenerateQRLettersCache',
          'bao' => 'CRM_GenerateQRLetters_DAO_GenerateQRLettersCache',
          'localizable' => 0,
          'add' => '1.0',
        ],
        'form_values' => [
          'name' => 'form_values',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Submitted Form Values'),
          'description' => E::ts('Submitted form values for this template'),
          'import' => TRUE,
          'where' => 'civicrm_qr_letters_cache.form_values',
          'export' => TRUE,
          'table_name' => 'civicrm_qr_letters_cache',
          'entity' => 'GenerateQRLettersCache',
          'bao' => 'CRM_GenerateQRLetters_DAO_GenerateQRLettersCache',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_PHP,
          'add' => '1.0',
        ],
        'datetime' => [
          'name' => 'datetime',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Date'),
          'where' => 'civicrm_qr_letters_cache.datetime',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_qr_letters_cache',
          'entity' => 'GenerateQRLettersCache',
          'bao' => 'CRM_GenerateQRLetters_DAO_GenerateQRLettersCache',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'activityDateTime',
          ],
          'add' => '1.0',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'qr_letters_cache', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'qr_letters_cache', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
